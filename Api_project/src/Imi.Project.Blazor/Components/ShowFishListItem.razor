@using Imi.Project.Blazor.Models

<div class="container">
    @if (CheckInlog)
    {
        <div class="active">
           <button class="btn btn-outline-info" @onclick="OnAddClick">Vis Toevoegen</button>
        </div><br />
    }

   

  <div class="row">
        @foreach(var item in Fishs)
        {
             <div class="col-md-6" style="margin-bottom:20px">
                    <div class="card text-center " >
                            <img src="@item.UrlImage" alt=@item.Name class="card-img-top" style="height:200px"/>
                        <div class="card-body">
                            <h5 class="card-title">@item.Name</h5>
                            <p class="card-text">@item.Price.ToString("€ #0.00")</p>
                             <button class="btn btn-warning" @onclick="e => OnEditClick.InvokeAsync(item)">Wijzigen</button>
                             <button class="btn btn-danger" @onclick="e => Show(item)">Verwijderen</button>
                             <a href="/fishes/@item.Id" class="btn btn-outline-info">Details</a>
                        </div>
                    </div>
            </div>
        }
       
  </div>
 </div>

@if (ShowConfirmation)
{
    
    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Confirm Delete</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                            @onclick="() => OnConfirmationChange(false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete??
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"
                            @onclick="() => OnConfirmationChange(false)">Cancel</button>
                    <button type="button" class="btn btn-danger"
                            @onclick="() => OnConfirmationChange(true)">Delete</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public List<FishListItem> Fishs { get; set; }
     [Parameter]
    public bool CheckInlog { get; set; }

    [Parameter]
    public EventCallback OnAddClick { get; set; }

    [Parameter]
    public EventCallback<FishListItem> OnEditClick { get; set; }

    [Parameter]
    public EventCallback<FishListItem> OnDeleteClick { get; set; }


    private FishListItem itemToDelete;
    protected bool ShowConfirmation { get; set; }


    public void Show(FishListItem item)
    {
        this.itemToDelete = item;
        ShowConfirmation = true;
        StateHasChanged();
    }

    protected async Task OnConfirmationChange(bool value)
    {
        if(value)
        {
            await OnDeleteClick.InvokeAsync(this.itemToDelete);
        }
       ShowConfirmation = false;      
     }

   }

}