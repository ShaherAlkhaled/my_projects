#pragma checksum "D:\G_B\Repo\my_projects\Api_project\src\Imi.Project.Vue\Views\Fishes\Index.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "f5fd91908c371feab6eba91f3af0f5a03d830176596e40de0a5ccb263ed05434"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Fishes_Index), @"mvc.1.0.view", @"/Views/Fishes/Index.cshtml")]
namespace AspNetCore
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\G_B\Repo\my_projects\Api_project\src\Imi.Project.Vue\Views\_ViewImports.cshtml"
using Imi.Project.Vue

#nullable disable
    ;
#nullable restore
#line 2 "D:\G_B\Repo\my_projects\Api_project\src\Imi.Project.Vue\Views\_ViewImports.cshtml"
using Imi.Project.Vue.Models

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"f5fd91908c371feab6eba91f3af0f5a03d830176596e40de0a5ccb263ed05434", @"/Views/Fishes/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"cc33cbf14a4d0791b63a5d7d7ee74c20e13f63f0f4c4d3060aa87811e48fb9db", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Fishes_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("v-for", new global::Microsoft.AspNetCore.Html.HtmlString("category in categories"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("v-bind:value", new global::Microsoft.AspNetCore.Html.HtmlString("category.id"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("v-for", new global::Microsoft.AspNetCore.Html.HtmlString("country in countries"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("v-bind:value", new global::Microsoft.AspNetCore.Html.HtmlString("country.id"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""container"" id=""container"">
<div class=""text-center"">
    <h1 class=""display-4"">Vissen</h1>
</div>
<div id=""app"">
       <div class=""col-md-12"">
        <button class=""btn btn-info"" v-if=""!isEidtOrCreate"" v-on:click.prevent=""toEditMode(false)"">Toevoegen</button>
       </div>
       <br />
         <div v-if=""!isEidtOrCreate"" class=""input-group"" style=""height: 100%"">
                <input class=""form-control input-lg border-primary""  v-model=""search"" placeholder=""Zoek ......."" />
                <div class=""input-groupd-append"">
                    <button type=""submit"" class=""btn btn-success"" style=""height: 100%"" v-on:click=""searchFishes"">
                        <svg xmlns=""http://www.w3.org/2000/svg"" width=""16"" height=""16"" fill=""currentColor"" class=""bi bi-search-fill"" viewBox=""0 0 16 16"">
                            <path d=""M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1");
            WriteLiteral(@" 1-11 0 5.5 5.5 0 0 1 11 0z"" />
                        </svg>
                    </button>
                </div>
         </div>
            <br/>
 
    <div class=""row"" v-if=""!isEidtOrCreate"" >
             <div class=""col-md-5"" style=""margin-bottom:20px"" v-for=""fish in fishes"" >
                        <div class=""card text-center"">
                                <img v-bind:src=""getImageSource(fish)""  class=""card-img-top"" style=""height:200px""/>
                            <div class=""card-body"">
                              <h5 class=""card-title"" >{{fish.name}}</h5>
                              <p class=""card-text"" >{{fish.price}} â‚¬</p>
                               <button type=""button"" class=""btn btn-primary""
                               v-on:click.prevent=""toEditMode(true,fish)"">Wijzigen</button>
                               <button type=""button"" class=""btn btn-danger""
                               v-on:click.prevent=""deleteClick(fish.id)"">Verwijderen</button>
             ");
            WriteLiteral(@"                   <button type=""button"" class=""btn btn-warning""
                               v-on:click.prevent=""editFoto(fish.id)"">Foto wijzigen</button>
                            </div>
                      </div>
             </div>        
   </div>
   <div class=""col-md-6"">
        <div  v-if=""currentFish"">
              <div v-if=""errors"">
                <ul>
                  <li class=""alert-danger"" v-for=""error in errors"">{{ error }}</li>
                </ul>
              </div>             
            <div class=""form-group"">
                <h6>Naam</h6>
                <input class=""form-control"" v-model=""currentFish.name"" required />
            </div>
            <div class=""form-group"">
                <h6>Prijs</h6>
                <input type=""number"" class=""form-control"" v-model=""currentFish.price"" required />
            </div>
            <div class=""form-group"">
                <h6>Maximum gewicht</h6>
                <input type=""number"" class=""form-contr");
            WriteLiteral(@"ol"" v-model=""currentFish.maxWeight"" required/>
            </div>
            <div class=""form-group"">
                <h6>Minimaal gewicht</h6>
                <input type=""number"" class=""form-control"" v-model=""currentFish.minWeigth"" required/>
            </div>
               <div class=""form-group"">
                <h6>Datum-van-aankomst</h6>
                <input type=""datetime-local"" class=""form-control"" v-model=""currentFish.dateOfArrival""/>
            </div>
            <div class=""form-group"">
                <h6>Categorie</h6>
                <select  v-model=""currentFish.categoryId"" class=""form-control"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f5fd91908c371feab6eba91f3af0f5a03d830176596e40de0a5ccb263ed054348658", async() => {
                WriteLiteral("{{category.name}}");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <h6>Land-van-herkomst</h6>\r\n                <select  v-model=\"currentFish.originCountryId\" class=\"form-control\">\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f5fd91908c371feab6eba91f3af0f5a03d830176596e40de0a5ccb263ed0543410068", async() => {
                WriteLiteral("{{country.name}}");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </div>  
            <div class=""form-group"">
                <h6>Verwerken</h6>
                <div class=""form-check"" v-for=""processing in fishProcessings"" >
                    <input id=""processings"" type=""checkbox""  v-bind:value=""processing.id"" v-model=""currentFish.fishProcessingIds""/>
                    <label for=""processings"" >{{processing.name}}</label>
                </div>
            </div>            
        
            <div class=""btn-group"">
                <button type=""submit"" class=""btn mr-4 btn-warning"" v-on:click.prevent=""saveFish"">Opslaan</button>
                <button class=""btn btn-primary""   v-on:click.prevent=""cancel"" >Annuleren</button>
            </div>
        </div>

    </div>

        <div class=""form-group"" v-if=""isEditImage"">
                <label>Foto</label>
                <input  type=""file"" class=""form-control""  v-on:change=""onFileSelected""/>
                <br />
                <button class=""btn bt");
            WriteLiteral("n-warning\" v-on:click.prevent=\"uploadImage(fish.id)\" >oplsaan</button>\r\n                <button class=\"btn btn-primary\"   v-on:click.prevent=\"cancel\" >Cancel</button>\r\n\r\n         </div>\r\n\r\n</div>\r\n</div>\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"

    
    <script>
       const token = JSON.parse(sessionStorage.getItem(""token""));
       const urlFishes = 'https://localhost:5001/api/Fishs';
       const urlCategories = 'https://localhost:5001/api/Categories';
       const urlCountries = 'https://localhost:5001/api/OriginCountry';
       const urlFishProcessing = 'https://localhost:5001/api/FishProcessing';
         let axiosConfig;
        if (token != null) {
            axiosConfig = { headers: { Authorization: `Bearer ${token.token}` } };
        }

        let app = new Vue({
            el: '#app',
            data: {
                fishes: null,
                currentFish: null,
                isEidtOrCreate: false,
                feedback: '',
                categories: '',
                countries: '',
                isEditMode: false,
                selectedFile: null,
                fishProcessings: '',
                isEditImage: false,
                fish:null,
                search:null,
          ");
                WriteLiteral(@"      errors: null,
              
               
               
            },
            created: function() {
                let self = this;
                self.getFishes();
            },
            methods: {
                getFishes: function() {
                    let self = this;
                    axios.get(urlFishes, axiosConfig)
                        .then(response => (self.fishes = response.data))
                        .catch(function (err){
                            console.log(err);
                        });
                },
                getImageSource: function(fish) {
                    return fish.urlImage;
                },
                deleteClick: function(id) {
                    let self = this;

                            if (confirm(`Are you sure you want to delete fish with Id ${id} ?`)) {
                                axios.delete(`${urlFishes}/${id}`, axiosConfig)
                                    .then(function(response) {");
                WriteLiteral(@"
                                        self.feedback = `Fish  with ID ${id} has been deleted`;
                                         alert(self.feedback);
                                        self.fishes.forEach(function(fish, i) {
                                            if (fish.id === id) {
                                                self.fishes.splice(i, 1);
                                            }
                                           
                                        })
                                    })
                                    .catch(function(error) { alert(error.message); });
                            } 
            
                },

                toEditMode: function(isEditMode, fish) {
                    let self = this;
                    self.isEditMode = isEditMode;
                    self.isEidtOrCreate = true;
                    self.getCategories();
                    self.getCountries();
                    self.");
                WriteLiteral(@"getFishProcessings();

                    if (!self.isEditMode) {
                        self.currentFish = {
                            name: """",
                            categoryId: 1,
                            originCountryId:1,
                            dateOfArrival: """",
                            minWeigth: """",
                            maxWeight: """",
                            price: """",
                            fishProcessingIds: []
                        };
                      

                    } else {
                        self.currentFish = fish;
                        self.currentFish.fishProcessingIds = [];
                        fish.fishProcessings.forEach((object) => {
                            self.currentFish.fishProcessingIds.push(object.id);
                        });
                    }

                },
                getCategories: function() {
                    let self = this;
                    axios.get(urlCategories,");
                WriteLiteral(@"axiosConfig)
                        .then(function(response) {
                            self.categories = response.data;
                        })
                        .catch(err => console.log(err.message));
                },
                getCountries: function() {
                    let self = this;
                    axios.get(urlCountries,axiosConfig)
                        .then(function(response) {
                            self.countries = response.data;
                        })
                        .catch(err => console.log(err.message));
                },
                getFishProcessings: function() {
                    let self = this;
                    axios.get(urlFishProcessing,axiosConfig)
                        .then(response => (self.fishProcessings = response.data))
                        .catch(err => console.log(err.message));
                },
                saveFish: function() {
                    let self = this;

                 ");
                WriteLiteral(@"   if (self.isEditMode) {
                        axios.put(urlFishes, self.currentFish, axiosConfig)
                            .then(function(response) {
                                self.feedback = `Fish ${self.currentFish.name} with ID ${self.currentFish.id} has been modified`;
                                 alert(self.feedback)
                                self.isEidtOrCreate = false;
                                self.currentFish = null;
                                self.feedback = null;
                                self.getFishes();
                                self.errors = null;
                            })
                            .catch(function(error) {
                                alert(error.message);
                                self.IsVaild();
                                return;
                            });
                            
                    }
                    else {
                        axios.post(urlFishes, self.cur");
                WriteLiteral(@"rentFish, axiosConfig)
                            .then(function(response) {
                                self.currentFish = response.data;
                                self.feedback = `Fish ${self.currentFish.name} with ID ${self.currentFish.id} has been created`;
                                alert(self.feedback)
                                self.getFishes();
                                self.isEidtOrCreate = false;
                                self.currentFish = null;
                                self.feedback = null;
                                self.errors = null;
                            })
                            .catch(function(error) {
                                console.log(error);
                                alert(error.message);
                                self.IsVaild();
                                return;
                            });
                            
                    }

                },
                cancel");
                WriteLiteral(@": function() {
                    let self = this;
                    self.isEidtOrCreate = false;
                    self.isEditImage = false;
                    self.fish = null;
                    self.currentFish = null;
                    self.errors = null;
                },
                onFileSelected: function(event) {
                    let self = this;
                    self.selectedFile = event.target.files[0];
                },

                uploadImage: function(id) {
                    let self = this;
                    let imageData = new FormData();
                    if (self.selectedFile == null) {
                        alert(""Gelieve image te kiezen"");
                        return;
                    }
                    imageData.append(""file"", self.selectedFile, self.selectedFile.name);
                    console.log(imageData.values.length);
                    let url = `${urlFishes}/${id}/image`;
                    axios.put(url, imag");
                WriteLiteral(@"eData, axiosConfig)
                        .then(function(response) {
                            self.fish = response.data;
                            self.feedbackImage = `Image of fish wiht ID ${id} is gewijzigd`;
                            self.getFishes();
                            self.isEditImage = false;
                            self.isEidtOrCreate = false;
                            self.currentFish = null;
                            alert(self.feedbackImage);
                        })
                        .catch(function(error) {
                            alert(error.message);
                        });
                

                },
                editFoto: function(id){
                    var self=this;
                    self.isEditImage = true;
                    self.isEidtOrCreate = true;
                    axios.get(`${urlFishes}/${id}`,axiosConfig)
                        .then(function(response) {
                            self.fish = resp");
                WriteLiteral(@"onse.data;
                            console.log(self.fish.id);
                        })
                        .catch(function(error) {
                          alert(error.message);
                        });
                },
                searchFishes:function(){
                      let self = this;
                    console.log(self.search);
                    axios.get(`https://localhost:5001/api/Search?search=${self.search}`, axiosConfig)
                        .then(function(response) {
                            self.fishes = response.data;
                            console.log(response);
                        })
                        .catch(err => alert(err.message));
                        
                },
                IsVaild: function() {
                    let self=this;
                    self.errors = [];
                    if (self.currentFish.name === """") {
                        self.errors.push('Name is verplicht....Gelieve alle velde");
                WriteLiteral(@"n in te vullen');
                    } else if (self.currentFish.price <= 0) {
                        self.errors.push('Gelieve geldige prijs in te vullen')
                    } else if (self.currentFish.minWeigth <= 0) {
                        self.errors.push('Gelieve geldige Minimaal gewicht in te vullen')

                    } else if (self.currentFish.maxWeight <= 0) {
                        self.errors.push('Gelieve geldige Maximum gewicht in te vullen')

                    } else {
                       self.errors.push('Er is fout opgetreden!! check Datum')

                    }
                },
                
             

                
             }
        
            });
    </script>
");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
