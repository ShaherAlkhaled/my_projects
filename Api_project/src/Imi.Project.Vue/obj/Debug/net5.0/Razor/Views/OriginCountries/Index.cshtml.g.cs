#pragma checksum "D:\G_B\Repo\my_projects\Api_project\src\Imi.Project.Vue\Views\OriginCountries\Index.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "c2c32a9594c22ee7ed5541254fc078aec6dbe23f80868cf40fbbf7e81a889e97"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_OriginCountries_Index), @"mvc.1.0.view", @"/Views/OriginCountries/Index.cshtml")]
namespace AspNetCore
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\G_B\Repo\my_projects\Api_project\src\Imi.Project.Vue\Views\_ViewImports.cshtml"
using Imi.Project.Vue

#nullable disable
    ;
#nullable restore
#line 2 "D:\G_B\Repo\my_projects\Api_project\src\Imi.Project.Vue\Views\_ViewImports.cshtml"
using Imi.Project.Vue.Models

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"c2c32a9594c22ee7ed5541254fc078aec6dbe23f80868cf40fbbf7e81a889e97", @"/Views/OriginCountries/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"cc33cbf14a4d0791b63a5d7d7ee74c20e13f63f0f4c4d3060aa87811e48fb9db", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_OriginCountries_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<div class=""container"" id=""container"">
<div class=""text-center"">
    <h1 class=""display-4"">Landen</h1>

</div>

<div id=""app"" class=""row"">

    <div class=""col-md-12"">
        <button class=""btn btn-info"" v-on:click.prevent=""toEditMode(false)"">Toevoegen</button>
    </div>
    <br />
    <br />

    <div class=""row"" v-if=""!isEidtOrCreate"" >
             <div class=""col-md-5"" style=""margin-bottom:20px"" v-for=""country in countries"" >
                        <div class=""card text-center"">
                            <div class=""card-body"">
                              <h5 class=""card-title"" >{{country.name}}</h5>
                               <button type=""button"" class=""btn btn-warning""
                               v-on:click.prevent=""toEditMode(true,country)"">Wijzigen</button>
                               <button type=""button"" class=""btn btn-danger""
                               v-on:click.prevent=""deleteClick(country.id)"">Verwijderen</button>
                            </div>");
            WriteLiteral(@"
                      </div>
             </div>        
   </div>

   <div class=""col-md-6"">
         <div  v-if=""currentCountry"">
              <div v-if=""errors"">
                <ul>
                  <li class=""alert-danger"" v-for=""error in errors"">{{ error }}</li>
                </ul>
              </div>             
             <div class=""form-group"">
                <h6>Naam</h6>
                <input class=""form-control"" v-model=""currentCountry.name""  />
              
            </div>
            <div class=""btn-group"">
                <button class=""btn mr-4 btn-warning"" v-on:click.prevent=""saveCountry"">Opslaan</button>
                <button class=""btn btn-primary""   v-on:click.prevent=""cancel"" >Annuleren</button>
            </div>
        </div>
    </div>


</div>
</div>


");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
   

    <script>
           const token = JSON.parse(sessionStorage.getItem(""token""));
           const url = 'https://localhost:5001/api/OriginCountry';
         let axiosConfig;
        if (token != null) {
            axiosConfig = { headers: { Authorization: `Bearer ${token.token}` } };
        }

        var app = new Vue({
            el: '#app',
            data: {
                countries: null,
                currentCountry: null,
                isReadOnly: true,
                feedback: '',
                isEditMode: false,
                isEidtOrCreate:false,
                 errors: null,
                 
            },
            created: function () {
                let self = this;
                self.getCountries();
            },
            methods: {
                getCountries: function() {
                    let self = this;
                    axios.get(url,axiosConfig)
                        .then(response => (self.countries = response.data)");
                WriteLiteral(@")
                        .catch(err => console.log(err.message));
                },

                
                toEditMode: function(isEditMode, country) {
                    var self = this;
                    self.isEditMode = isEditMode;
                    self.isEidtOrCreate = true;
                    if (!self.isEditMode) {
                        self.currentCountry = {
                            name: """",

                        }
                    } else {
                        self.currentCountry = country;
                    }

                },

                deleteClick: function(id) {
                    let self = this;

                    if (confirm(`Are you sure you want to delete Country with Id ${id} ?`)) {
                        axios.delete(`https://localhost:5001/api/OriginCountry/${id}`, axiosConfig)
                            .then(function(response) {
                                self.feedback = `Country  with ID ${id} has been del");
                WriteLiteral(@"eted`;
                                self.countries.forEach(function(country, i) {
                                    if (country.id === id) {
                                        self.countries.splice(i, 1);
                                    }

                                });
                            })
                            .catch(function(error) { alert(error.message); });
                    } 
            
                },
                cancel: function() {
                    let self = this;
                    self.isEidtOrCreate = false;
                    self.currentCountry = null;
                    self.errors = null;

                },

                saveCountry: function() {
                    let self = this;

                    if (self.isEditMode) {
                        axios.put(url, self.currentCountry, axiosConfig)
                            .then(function(response) {
                                self.feedback = `Country ${s");
                WriteLiteral(@"elf.currentCountry.name} with ID ${self.currentCountry.id} has been modified`;
                                alert(self.feedback)
                                self.isEidtOrCreate = false;
                                self.currentCountry = null;
                                self.getCountries();
                                 self.feedback = null;
                                self.error = null;
                            })
                            .catch(function(error) {
                                 alert(error.message);
                                self.IsVaild();
                                return;
                            });
                            
                    }
                    else {
                        axios.post(url, self.currentCountry, axiosConfig)
                            .then(function(response) {
                                self.currentCountry = response.data;
                                self.countries.push(self.c");
                WriteLiteral(@"urrentCountry);
                                self.feedback = `Country ${self.currentCountry.name} with ID ${self.currentCountry.id} has been created`;
                                alert(self.feedback)
                                self.isEidtOrCreate = false;
                                self.currentCountry = null;
                                self.feedback = null;
                                self.error = null;
                            })
                            .catch(function(error) {
                                console.log(error);
                                alert(error.message);
                                self.IsVaild();
                                return;
                            });
                    }

                },

                IsVaild: function() {
                    let self=this;
                     if (self.currentCountry.name === """") {
                         self.errors = [];
                       self.errors.push(");
                WriteLiteral("\'Name is verplicht \');\r\n                     }\r\n                }\r\n\r\n            }\r\n        });\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
